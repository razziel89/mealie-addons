name: "ci"

on:
  push:
  pull_request:
    branches: main

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Golang
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Install dependencies
        run: |
          # System.
          sudo apt-get install make curl wget
          # Go.
          curl -sSfL "${RAW_URL}/${LINT}" | sudo sh -s -- -b "${TARGET}" v1.63.4
          # Custom.
          sudo wget -O "${TARGET}/mdslw" "${MDSLW_URL}/${MDSLW_BIN}"
          sudo chmod +x "${TARGET}/mdslw"
        env:
          RAW_URL: https://raw.githubusercontent.com
          LINT: golangci/golangci-lint/master/install.sh
          MDSLW_URL: https://github.com/razziel89/mdslw/releases/latest/download/
          MDSLW_BIN: mdslw_x86_64-unknown-linux-musl
          TARGET: /usr/local/bin

      - name: Set up project
        run: make setup

      - name: Build binary
        run: make build

      - name: Lint project
        run: make lint

      - name: Build all release binaries on main
        uses: goreleaser/goreleaser-action@v4
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          args: build --clean --snapshot
        env:
          CLIVERSION: ci-cd

      - name: Set CLIVERSION env var on tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo >> $GITHUB_ENV "CLIVERSION=$(
            git describe --exact-match --tags | sed 's/^v//'
          )"

      - name: Release binaries on tag
        uses: goreleaser/goreleaser-action@v4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-ci:
    needs: [ci]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine docker tags and whether to push
        env:
          REF: ${{ github.ref }}
        run: |
          if [[ ${REF} == "refs/tags/"* ]]; then
            tag=$(git describe --exact-match --tags)
            echo "DOCKER_TAGS=${IMAGE_NAME}:latest,${IMAGE_NAME}:${tag}"
            echo "DOCKER_DO_PUSH=true"
          else
            echo "DOCKER_TAGS=${IMAGE_NAME}:main"
            echo "DOCKER_DO_PUSH=false"
          fi >> $GITHUB_ENV

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: extract-metadata
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - uses: docker/build-push-action@v6
        id: push
        with:
          context: .
          push: ${{ env.DOCKER_DO_PUSH }}
          tags: ${{ env.DOCKER_TAGS }}
          labels: ${{ steps.extract-metadata.outputs.labels }}

      - name: Generate artifact attestation
        if: ${{ env.DOCKER_DO_PUSH == 'true' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
